export class RenderingPlugin extends Plugin {
    scene: any;
    cssScene: any;
    renderGL: any;
    renderCSS3D: any;
    composer: any;
    clock: any;
    bloomEffect: any;
    ssaoEffect: any;
    outlineEffect: any;
    normalPass: any;
    selection: any;
    renderPass: any;
    normalPassInstance: any;
    effectPassBloom: any;
    effectPassSSAO: any;
    effectPassOutline: any;
    effectsConfig: {
        bloom: {
            enabled: boolean;
            intensity: number;
            kernelSize: KernelSize;
            luminanceThreshold: number;
            luminanceSmoothing: number;
        };
        ssao: {
            enabled: boolean;
            blendFunction: BlendFunction;
            samples: number;
            rings: number;
            distanceThreshold: number;
            distanceFalloff: number;
            rangeThreshold: number;
            rangeFalloff: number;
            luminanceInfluence: number;
            radius: number;
            scale: number;
            bias: number;
            intensity: number;
            color: number;
        };
        outline: {
            enabled: boolean;
            blendFunction: BlendFunction;
            edgeStrength: number;
            pulseSpeed: number;
            visibleEdgeColor: number;
            hiddenEdgeColor: number;
            kernelSize: KernelSize;
            blur: boolean;
            xRay: boolean;
        };
    };
    css3dContainer: any;
    webglCanvas: any;
    background: {
        color: number;
        alpha: number;
    };
    managedLights: Map<any, any>;
    instancedMeshManager: any;
    _setupSelectionListener(): void;
    handleSelectionChange(payload: any): void;
    _isObjectInMainScene(object: any): boolean;
    _setupRenderersAndComposer(): void;
    _rebuildEffectPasses(): void;
    setEffectEnabled(effectName: any, enabled: any): void;
    configureEffect(effectName: any, settings: any): void;
    getEffectConfiguration(effectName: any): any;
    addLight(id: any, type: any, options?: {}): any;
    removeLight(id: any): boolean;
    getLight(id: any): any;
    configureLight(id: any, options: any): boolean;
    _setupLighting(): void;
    setBackground(color?: number, alpha?: number): void;
    _onWindowResize: () => void;
    _updateFrustumHelper(): void;
    getWebGLScene(): any;
    getCSS3DScene(): any;
    getInstancedMeshManager(): any;
    getCSS3DRenderer(): any;
}
import { Plugin } from '../core/Plugin.js';
import { KernelSize } from 'postprocessing';
import { BlendFunction } from 'postprocessing';
