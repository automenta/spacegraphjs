export class TextMeshNode extends ShapeNode {
    static fontCache: Map<any, any>;
    static defaultFont: any;
    textMesh: any;
    font: any;
    isLoadingFont: boolean;
    getDefaultData(): {
        type: string;
        text: string;
        fontSize: number;
        fontPath: any;
        fontFamily: string;
        fontWeight: string;
        height: number;
        curveSegments: number;
        bevelEnabled: boolean;
        bevelThickness: number;
        bevelSize: number;
        bevelOffset: number;
        bevelSegments: number;
        align: string;
        materialType: string;
        strokeWidth: number;
        strokeColor: number;
        gradientColors: any;
        animated: boolean;
        animationType: string;
        label: string;
        shape: string;
        size: number;
        color: number;
        lodLevels: any[];
        labelLod: any[];
    };
    _loadFont(): Promise<void>;
    _createTextMesh(): void;
    _alignText(geometry: any): void;
    _createTextMaterials(): any;
    _addStroke(): void;
    _createFallbackMesh(): void;
    _startTextAnimation(): void;
    animationFrame: number;
    _stopTextAnimation(): void;
    _updateTextAnimation(): void;
    _disposeTextMesh(): void;
    setText(text: any): void;
    setFontSize(size: any): void;
    setColor(color: any): void;
    setHeight(height: any): void;
    setBevel(enabled: any, thickness?: number, size?: number): void;
    setAlign(align: any): void;
    setStroke(width: any, color?: number): void;
    setGradient(colors: any): void;
    setAnimated(animated: any, type?: string): void;
    setFont(fontFamily: any, fontWeight?: string): void;
    setCustomFont(fontPath: any): void;
    getTextBounds(): any;
}
import { ShapeNode } from './ShapeNode.js';
