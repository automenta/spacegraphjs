export class MetaWidgetNode extends HtmlNode {
    childWidgets: Map<any, any>;
    layout: string;
    columns: number;
    gap: number;
    resizable: boolean;
    collapsible: boolean;
    isCollapsed: boolean;
    getDefaultData(): {
        type: string;
        title: string;
        layout: string;
        columns: number;
        gap: number;
        resizable: boolean;
        collapsible: boolean;
        backgroundColor: string;
        widgets: any[];
        padding: number;
        showHeader: boolean;
        label: string;
        content: string;
        width: number;
        height: number;
        contentScale: number;
        editable: boolean;
        labelLod: any[];
    };
    _generateHeader(): string;
    _initializeWidgets(): void;
    _setupMetaWidgetEvents(): void;
    _setupDragAndDrop(element: any): void;
    addWidget(widgetData: any, position?: any): any;
    removeWidget(widgetId: any): boolean;
    _renderWidget(widget: any): void;
    _createWidgetContent(widget: any): HTMLDivElement;
    _createControlPanelContent(widget: any): string;
    _createProgressContent(widget: any): string;
    _createChartContent(widget: any): string;
    _createInfoContent(widget: any): string;
    _setupControlPanelEvents(content: any, widget: any): void;
    _setupWidgetEvents(wrapper: any, widget: any): void;
    _updateLayout(): void;
    _showAddWidgetDialog(): void;
    _editWidget(widget: any): void;
    _generateWidgetId(): string;
    _handleWidgetDrop(widgetId: any, targetSlot: any): void;
    setLayout(layout: any): void;
    setColumns(columns: any): void;
    setGap(gap: any): void;
    toggleCollapsed(): void;
    getWidget(widgetId: any): any;
    getAllWidgets(): any[];
    updateWidget(widgetId: any, newData: any): boolean;
    getLayoutData(): {
        layout: string;
        columns: number;
        gap: number;
        widgets: any[];
    };
}
import { HtmlNode } from './HtmlNode.js';
