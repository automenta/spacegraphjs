export namespace CAMERA_MODES {
    let ORBIT: string;
    let FREE: string;
    let TOP_DOWN: string;
    let FIRST_PERSON: string;
}
export class Camera {
    constructor(space: any);
    space: any;
    _cam: any;
    domElement: any;
    targetPosition: any;
    targetLookAt: any;
    currentPosition: any;
    currentLookAt: any;
    isPanning: boolean;
    panStart: any;
    viewHistory: any[];
    maxHistory: number;
    currentTargetNodeId: any;
    initialState: any;
    zoomSpeed: number;
    panSpeed: number;
    minZoomDistance: number;
    maxZoomDistance: number;
    dampingFactor: number;
    animationFrameId: any;
    namedViews: Map<any, any>;
    cameraMode: string;
    freeCameraSpeed: number;
    freeCameraVerticalSpeed: number;
    pointerLockControls: any;
    isPointerLocked: boolean;
    moveState: {
        forward: boolean;
        backward: boolean;
        left: boolean;
        right: boolean;
        up: boolean;
        down: boolean;
    };
    prevTime: number;
    followTargetObject: any;
    followOptions: {
        distance: number;
        damping: number;
        offset: any;
        autoEndOnManualControl: boolean;
    };
    isFollowing: boolean;
    _isManuallyControlled: boolean;
    _initializePointerLockControls(): void;
    setFreeCameraMovement(direction: any, isActive: any): void;
    setInitialState(): void;
    startPan(startX: any, startY: any): void;
    pan(deltaX: any, deltaY: any): void;
    endPan: () => void;
    zoom(deltaY: any): void;
    moveTo(x: any, y: any, z: any, duration?: number, lookAtTarget?: any, newCameraMode?: any): void;
    resetView(duration?: number): void;
    pushState(): void;
    popState(duration?: number): void;
    getCurrentTargetNodeId: () => any;
    setCurrentTargetNodeId: (nodeId: any) => void;
    _startUpdateLoop: () => void;
    _updateCameraLogic: () => void;
    startFollowing(target: any, options?: {}): void;
    stopFollowing(): void;
    dispose(): void;
    _loadNamedViewsFromStorage(): void;
    _saveNamedViewsToStorage(): void;
    saveNamedView(name: any): boolean;
    restoreNamedView(name: any, duration?: number): boolean;
    deleteNamedView(name: any): boolean;
    getNamedViews: () => any[];
    hasNamedView: (name: any) => boolean;
    setCameraMode(mode: any, calledInternally?: boolean): void;
}
