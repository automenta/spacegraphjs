export class AdvancedHudManager extends HudManager {
    constructor(space: any, container: any, uiPluginCallbacks: any);
    settings: {
        showPerformanceMetrics: boolean;
        showMinimap: boolean;
        showStatusBar: boolean;
        showNotifications: boolean;
        showProgressIndicators: boolean;
        autoHideDelay: number;
        hudOpacity: number;
    };
    performanceMetrics: {
        fps: number;
        frameTime: number;
        nodeCount: number;
        edgeCount: number;
        lastUpdateTime: number;
    };
    notifications: any[];
    progressIndicators: Map<any, any>;
    statusItems: Map<any, any>;
    _createAdvancedHudElements(): void;
    performancePanel: HTMLDivElement;
    minimapPanel: HTMLDivElement;
    statusBar: HTMLDivElement;
    notificationContainer: HTMLDivElement;
    progressContainer: HTMLDivElement;
    cameraStatusIndicator: HTMLDivElement;
    layoutStatusIndicator: HTMLDivElement;
    navigationControls: HTMLDivElement;
    viewModeControls: HTMLDivElement;
    quickActionsPanel: HTMLDivElement;
    _createPerformancePanel(): HTMLDivElement;
    _createMinimapPanel(): HTMLDivElement;
    _createStatusBar(): HTMLDivElement;
    _createNotificationContainer(): HTMLDivElement;
    _createProgressContainer(): HTMLDivElement;
    _createCameraStatusIndicator(): HTMLDivElement;
    _createLayoutStatusIndicator(): HTMLDivElement;
    _createNavigationControls(): HTMLDivElement;
    _createViewModeControls(): HTMLDivElement;
    _createQuickActionsPanel(): HTMLDivElement;
    _bindPanelToggle(panel: any): void;
    _bindNavigationControls(controls: any): void;
    _bindViewModeControls(controls: any): void;
    _bindQuickActions(panel: any): void;
    _initMinimap(canvas: any): void;
    minimapCanvas: any;
    minimapCtx: any;
    _startPerformanceMonitoring(): void;
    _startTimeUpdater(timeElement: any): void;
    _subscribeToAdvancedEvents(): void;
    _updatePerformanceDisplay(): void;
    _updateCameraStatus(): void;
    _updateLayoutStatus(event: any): void;
    _updateSelectionStatus(): void;
    _updateGraphStatus(): void;
    _updateMinimap(): void;
    _calculateMinimapBounds(nodes: any): {
        minX: number;
        minY: number;
        maxX: number;
        maxY: number;
        width: number;
        height: number;
    };
    _worldToMinimap(position: any, bounds: any, scale: any, offsetX: any, offsetY: any): {
        x: any;
        y: any;
    };
    _drawCameraIndicator(ctx: any, bounds: any, scale: any, offsetX: any, offsetY: any): void;
    showNotification(message: any, type?: string, duration?: number): HTMLDivElement;
    _getNotificationIcon(type: any): any;
    _removeNotification(notification: any): void;
    showProgress(id: any, label: any, progress?: number): void;
    hideProgress(id: any): void;
    _addRandomNode(): any;
    _selectAllNodes(): void;
    _clearSelection(): void;
    _applyAutoLayout(): void;
    _exportGraph(): void;
    _toggleFullscreen(): void;
    _takeScreenshot(): void;
    _setViewMode(mode: any): void;
    _toggleGrid(): void;
    _toggleAxes(): void;
    _toggleLabels(): void;
    _toggleShadows(): void;
    _minimapZoom(factor: any): void;
    _minimapCenter(): void;
    _minimapClick(event: any): void;
    updateHudCameraMode(mode: any): void;
    updateHudSettings(newSettings: any): void;
    getHudSettings(): {
        showPerformanceMetrics: boolean;
        showMinimap: boolean;
        showStatusBar: boolean;
        showNotifications: boolean;
        showProgressIndicators: boolean;
        autoHideDelay: number;
        hudOpacity: number;
    };
}
import { HudManager } from './HudManager.js';
