export class UIManager {
    constructor(space: any, contextMenuEl: any, confirmDialogEl: any, uiPluginCallbacks: any);
    space: any;
    container: any;
    confirmDialog: any;
    contextMenu: any;
    edgeMenu: any;
    hudManager: any;
    toolbar: any;
    currentState: string;
    activePointerId: any;
    draggedNode: any;
    draggedNodeInitialZ: number;
    dragOffset: any;
    resizedNode: any;
    resizeStartPointerPos: {
        x: number;
        y: number;
    };
    resizeStartNodeSize: {
        width: number;
        height: number;
    };
    resizeNodeScreenScaleX: number;
    resizeNodeScreenScaleY: number;
    hoveredEdge: any;
    pointerState: {
        down: boolean;
        button: number;
        clientX: number;
        clientY: number;
        startClientX: number;
        startClientY: number;
        isDraggingThresholdMet: boolean;
        DRAG_THRESHOLD: number;
    };
    tempLinkLine: any;
    _uiPluginCallbacks: {
        setSelectedNode: () => void;
        setSelectedEdge: () => void;
        cancelLinking: () => void;
        getIsLinking: () => boolean;
        getLinkSourceNode: () => any;
        getSelectedNodes: () => Set<any>;
        getSelectedEdges: () => Set<any>;
        completeLinking: () => void;
    };
    _applySavedTheme(): void;
    _bindEvents(): void;
    _subscribeToSpaceGraphEvents(): void;
    _onRequestConfirm: (payload: any) => void;
    _onCameraModeChanged: (data: any) => void;
    _onSelectionChanged: (payload: any) => void;
    _updateNormalizedPointerState(e: any, isDownEvent?: any): void;
    _transitionToState(newState: any, data?: {}): void;
    _onPointerDown: (e: any) => void;
    _onPointerMove: (e: any) => void;
    _onPointerUp: (e: any) => void;
    _handleNodeControlButtonClick(buttonEl: any, node: any): void;
    _onContextMenu: (e: any) => void;
    _onDocumentClick: (e: any) => void;
    _onKeyDown: (e: any) => void;
    _onWheel: (e: any) => void;
    _getTargetInfo(event: any): {
        element: Element;
        nodeElement: Element;
        resizeHandle: Element;
        nodeControls: Element;
        contentEditable: Element;
        interactiveElement: Element;
        node: any;
        intersectedEdge: any;
    };
    _handleHover(e: any): void;
    _createTempLinkLine(sourceNode: any): void;
    _updateTempLinkLine(screenX: any, screenY: any): void;
    _removeTempLinkLine(): void;
    _onLinkingStarted: (data: any) => void;
    _onLinkingCancelled: (_data: any) => void;
    _onLinkingCompleted: (_data: any) => void;
    dispose(): void;
}
