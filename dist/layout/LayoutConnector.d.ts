export class LayoutConnector {
    constructor(config?: {});
    space: any;
    pluginManager: any;
    settings: {
        connectionTypes: string[];
        defaultConnectionType: string;
        routingPadding: number;
        bundlingThreshold: number;
        bundlingRadius: number;
        animate: boolean;
        animationDuration: number;
        avoidOverlaps: boolean;
        maxDetourFactor: number;
        connectionStrength: number;
    };
    connections: Map<any, any>;
    layoutRegions: Map<any, any>;
    routingGraph: Map<any, any>;
    connectionPaths: Map<any, any>;
    isActive: boolean;
    setContext(space: any, pluginManager: any): void;
    registerLayoutRegion(regionId: any, bounds: any, layoutType: any, nodes?: any[]): void;
    unregisterLayoutRegion(regionId: any): void;
    addConnection(sourceNodeId: any, targetNodeId: any, options?: {}): string;
    removeConnection(connectionId: any): void;
    _findNodeRegion(nodeId: any): any;
    _calculateConnectionPoints(bounds: any): any[];
    _createObstaclesFromNodes(nodes: any, bounds: any): any;
    _updateRoutingGraph(): void;
    _addIntermediateRoutingNodes(): void;
    _connectRoutingNodes(): void;
    _pathHasObstacle(start: any, end: any): boolean;
    _lineIntersectsCircle(start: any, end: any, circleCenter: any, radius: any): boolean;
    _routeConnection(connection: any): void;
    _routeDirect(start: any, end: any): any[];
    _routeOrthogonal(start: any, end: any, connection: any): any[];
    _routeCurved(start: any, end: any, connection: any): any[];
    _routeBundled(start: any, end: any, connection: any): any[];
    _createBundledPath(start: any, end: any, bundleCandidates: any): any[];
    _findPath(start: any, end: any, connection: any): any[];
    _findClosestRoutingNode(position: any, regionId: any): any;
    _aStar(startNodeId: any, endNodeId: any): any[];
    _getRoutingNodeId(nodeData: any): any;
    _generateBezierPath(p0: any, p1: any, p2: any, p3: any, segments: any): any[];
    _bezierPoint(p0: any, p1: any, p2: any, p3: any, t: any): any;
    _animateConnection(connection: any): void;
    _createVisualConnection(connection: any): void;
    _removeVisualElement(element: any): void;
    _getNodeById(nodeId: any): any;
    updateConnection(connectionId: any, options?: {}): void;
    getAllConnections(): any[];
    getConnectionsForRegion(regionId: any): any[];
    activate(): void;
    deactivate(): void;
    _updateAllConnections(): void;
    updateConfig(newConfig: any): void;
    dispose(): void;
}
